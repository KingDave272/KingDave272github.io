<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Forecast (Chicago)</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h2>Temperature Forecast (LA)</h2>
    <p>This code was generated with the assistance of ChatGPT, an AI language model developed by OpenAI.</p>
    <p>
    <ul>
    <li>Blue for cooler temperatures (e.g., below 50F),</li>
    <li>Green for moderate temperatures (e.g., 50F to 75F),</li>
    <li>Red for hot temperatures (e.g., above 75F).</li>
    </ul>
    </p>
    
    <canvas id="weatherChart" width="400" height="200"></canvas>
        <script>
    //Code provided by ChatGPT (OpenAI) 
    //for creating a dynamic bar chart
    //https://www.openai.com/
    
        // The NWS API endpoint for weather data 
        const nwsUrl = 'https://api.weather.gov/gridpoints/LOX/155,45/forecast'; // Los Angeles coordinates (34.0549,118.2426)

        // Fetch data from NWS API
        fetch(nwsUrl)
            .then(response => response.json())
            .then(data => {
                const times = [];
                const temperatures = [];
                const colors = [];

                // Parse data (forecast times and temperature values)
                data.properties.periods.forEach(period => {
                    const formattedTime = formatTime(period.startTime);  // Convert time to a readable format
                    times.push(formattedTime);  // Time of forecast
                    temperatures.push(period.temperature);  // Temperature value
                    colors.push(getColorForTemperature(period.temperature));  // Dynamic color based on temperature
                });

                // Call function to create the bar chart with the data
                createBarChart(times, temperatures, colors);
            })
            .catch(error => console.error('Error fetching weather data:', error));

        // Function to format time into a more readable format
        function formatTime(isoTime) {
            const date = new Date(isoTime); // Convert ISO time to Date object
            return date.toLocaleString('en-US', {
                weekday: 'short', // Day of the week, e.g., "Mon"
                month: 'short', // Month, e.g., "Mar"
                day: 'numeric', // Day of the month, e.g., "19"
                hour: 'numeric', // Hour in numeric form, e.g., "6"
                minute: '2-digit', // Minute in 2 digits, e.g., "00"
                hour12: true // Use 12-hour format with AM/PM
            });
        }

        // Function to get the color based on temperature
        function getColorForTemperature(temperature) {
            if (temperature <= 50) {
                return "rgba(255, 232, 242, 0.2)";  // Blue for cool temperatures
            } else if (temperature <= 75) {
                return "rgba(255, 172, 122, 0.2)";  // Green for moderate temperatures
            } else {
                return "rgba(255, 42, 142, 0.2)";  // Red for hot temperatures
            }
        }

        // Function to create the bar chart using Chart.js
        function createBarChart(times, temperatures, colors) {
            const ctx = document.getElementById("weatherChart").getContext("2d");

            new Chart(ctx, {
                type: 'bar',  // Bar chart type
                data: {
                    labels: times,  // X-axis: Forecast times
                    datasets: [{
                        label: "Temperature (F)",
                        data: temperatures,  // Y-axis: Temperature values
                        backgroundColor: colors,  // Dynamic colors for each bar
                        borderColor: "rgba(75, 192, 192, 1)",  // Border color (same for all bars)
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false,  // Temperature levels won't start at 0
                        }
                    },
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>